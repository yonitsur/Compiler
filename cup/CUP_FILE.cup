/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		throw new RuntimeException();
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	System.out.print(s.sym);
	if (s.value != null)
	{
		System.out.print("(");
		System.out.print(s.value);
		System.out.print(")");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal GT;
terminal LT;
terminal COMMA;
terminal NEW;
terminal VOID;
terminal TYPE_VOID;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal ARRAY;
terminal CLASS;
terminal NIL;
terminal EXTENDS;
terminal TYPE1_COMMENT;
terminal TYPE2_COMMENT;
terminal RETURN;
terminal LEADING_ZERO;
terminal T1_ERR;
terminal T2_ERR;

/*************/
/* TERMINALS */
/*************/
terminal String ID;
terminal Integer INT;
terminal String STRING;
terminal UMINUS;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_DEC		dec;
non terminal AST_DEC_VAR	varDec;
non terminal AST_DEC_FUNC	funcDec;
non terminal AST_DEC_CLASS	classDec;
non terminal AST_DEC_LIST	decList;
non terminal AST_DEC_ARRAY arrayDec;
non terminal AST_NEW_EXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_EXP exp;
non terminal AST_EXP_VAR	varExp;
non terminal AST_EXP_CALL	callExp;
non terminal AST_EXP_BINOP	binopExp;
non terminal AST_EXP_LIST	expListComma;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_TYPE_NAME	typeName;
non terminal AST_TYPE_NAME_LIST	typeNameListComma;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left EQ;
precedence left LT, GT;
precedence left MINUS, PLUS;
precedence left TIMES, DIVIDE;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
start with decList;

/********************/
/* DERIVATION RULES */
/********************/
decList		::=		dec:d decList:l	{: RESULT = new AST_DEC_LIST(d,l,dleft);    :}
					| dec:d			{: RESULT = new AST_DEC_LIST(d,null,dleft); :};

dec			::=		varDec:d		{: RESULT = d; :}
					| funcDec:d		{: RESULT = d; :}
					| classDec:d	{: RESULT = d; :}
					| arrayDec:d 	{: RESULT = d;      :} 
					;

cField      ::=		varDec: v                                 {: RESULT = new AST_CFIELD(v,vleft) ; :}
                    | funcDec: f 								{: RESULT = new AST_CFIELD(f,fleft); :}
				
                    ;

cFieldList  ::=		cField:cf cFieldList:l                      {: RESULT = new AST_CFIELD_LIST(cf,l,cfleft); :}
                    | cField:cf                                  {: RESULT = new AST_CFIELD_LIST(cf,null,cfleft); :}
                    ;


arrayDec::=		ARRAY ID:id EQ ID:type LBRACK RBRACK SEMICOLON {: RESULT = new AST_DEC_ARRAY(type,id,typeleft);      :}
					;


varDec		::=		ID:type ID:var SEMICOLON	            {: RESULT = new AST_DEC_VAR(type,var,typeleft); :}
					| ID:type ID:var ASSIGN exp:e SEMICOLON {: RESULT = new AST_DEC_VAR(type,var,e,typeleft);    :}
					| ID:type ID:var ASSIGN newExp:ne SEMICOLON {: RESULT = new AST_DEC_VAR(type,var,ne,typeleft);      :}
					;

funcDec		::=		ID:ret ID:name LPAREN typeNameListComma:tnl RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_DEC_FUNC(ret,name,tnl,body,retleft); :}
					| ID:ret ID:name LPAREN RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_DEC_FUNC(ret,name,null,body,retleft); :}
					;

classDec    ::=		CLASS ID:id LBRACE cFieldList:fields RBRACE {: RESULT = new AST_DEC_CLASS(id,fields,idleft); :}
                    | CLASS ID:id EXTENDS ID:parent LBRACE cFieldList:fields RBRACE {: RESULT = new AST_DEC_CLASS(id, parent, fields,idleft); :}
                    ;

stmtList	::=		stmt:s stmtList:l	{: RESULT = new AST_STMT_LIST(s,l,sleft);    :}
					| stmt:s			{: RESULT = new AST_STMT_LIST(s,null,sleft); :}
					;

stmt		::=		varDec:v                                                  {: RESULT = new AST_STMT_DEC_VAR(v,vleft);       :}
					| callExp:callExp SEMICOLON								{: RESULT = new AST_STMT_CALL(callExp,callExpleft);    :}
					| RETURN exp:e SEMICOLON									{: RESULT = new AST_STMT_RETURN(e,eleft);        :}
					| RETURN:r SEMICOLON                                            {: RESULT = new AST_STMT_RETURN(rleft); :}
					| varExp:v ASSIGN exp:e SEMICOLON							{: RESULT = new AST_STMT_ASSIGN(v,e,vleft);      :}
					| varExp:v ASSIGN newExp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e,vleft); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body,condleft); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body,condleft); :};



newExp      ::=		NEW ID:t 							  {: RESULT = new AST_NEW_EXP(t,tleft);      :}
					| NEW ID:t LBRACK exp:e RBRACK 	  {: RESULT = new AST_NEW_EXP(t,e,tleft);        :}
					;				


exp			::=		INT:i			{: RESULT = new AST_EXP_INT(i,ileft);    :}
					| MINUS INT:i						{: RESULT = new AST_EXP_INT(-i,ileft); :}
					| STRING:s		{: RESULT = new AST_EXP_STRING(s,sleft); :}
					| varExp:v		{: RESULT = v; :}
					| callExp:e		{: RESULT = e; :}
					| binopExp:e	{: RESULT = e; :}
					| LPAREN exp:e RPAREN	{: RESULT = e ;	:}
					| NIL:n    {: RESULT = new AST_EXP_NIL(nleft); :} 
					;


binopExp	::=		exp:e1 PLUS exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,0,e1left); :}
					| exp:e1 MINUS exp:e2	{: RESULT = new AST_EXP_BINOP(e1,e2,1,e1left); :}
					| exp:e1 TIMES exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,2,e1left); :}
					| exp:e1 DIVIDE exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,3,e1left); :}
					| exp:e1 EQ exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 4,e1left);:}
					| exp:e1 LT exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 5,e1left);:}
					| exp:e1 GT exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 6,e1left);:}

					;

callExp		::=		ID:funcName LPAREN expListComma:el RPAREN	{: RESULT = new AST_EXP_CALL(funcName,el,null,funcNameleft); :}
					| ID:funcName LPAREN RPAREN					{: RESULT = new AST_EXP_CALL(funcName,null,null,funcNameleft); :} 
					| varExp:v DOT ID:funcName LPAREN expListComma:el RPAREN {: RESULT = new AST_EXP_CALL(funcName,el,v,funcNameleft);:} 
					| varExp:v DOT ID:funcName LPAREN RPAREN 	{: RESULT = new AST_EXP_CALL(funcName,null,v,funcNameleft);:} 
					
					;

expListComma	::=		exp:e COMMA expListComma:el	{: RESULT = new AST_EXP_LIST(e,el,eleft);   :}
						| exp:e						{: RESULT = new AST_EXP_LIST(e,null,eleft); :};

typeName				::=		ID:type ID:name									{: RESULT = new AST_TYPE_NAME(type,name,typeleft);    :}
								;				
							
typeNameListComma		::=		typeName:tn COMMA typeNameListComma:tnl			{: RESULT = new AST_TYPE_NAME_LIST(tn,tnl,tnleft);  :}
								| typeName:tn									{: RESULT = new AST_TYPE_NAME_LIST(tn,null,tnleft); :}
								;
varExp		::=		ID:name							{: RESULT = new AST_EXP_VAR_SIMPLE(name,nameleft);       :}
					| varExp:v DOT ID:fieldName		{: RESULT = new AST_EXP_VAR_FIELD(v,fieldName,vleft); :} 
					| varExp:v LBRACK exp:e RBRACK	{: RESULT = new AST_EXP_VAR_SUBSCRIPT(v,e,vleft);     :}
					
	;

